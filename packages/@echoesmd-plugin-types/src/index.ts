import type { Component } from 'vue'

export interface Plugin {
  // Added incase future Plugin updates include changes outside of vault
  install: (helpers: {
    addComponent: addComponent,
    addSettingsGroup: addSettingsGroup,
    addSettingsToGroupList: addSettingsToGroupList,
    addFileType: addFileType,
  }) => void
  version: string,
  core?: boolean,
}

export interface ComponentProps {
  markdownExport: markdownExport,
  markdownImport: markdownImport,
}

interface SettingsGroupBase {
  id: string,
  section: 'general' | 'plugins' | 'danger-zone',
}

interface SettingsGroupButton extends SettingsGroupBase {
  type: 'button',
  title: string,
  description: string,
  action: () => void,
  color: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'error',
}

interface SettingsgroupList extends SettingsGroupBase {
  type: 'list',
  title: string,
  description: string,
  items: {
    [key: string]: SettingsGroupListItem
  },
}

export type SettingsGroup = SettingsGroupButton | SettingsgroupList

interface SettingsGroupListItem {
  name: string,
  type: 'text' | 'number' | 'select' | 'checkbox',
  default: unknown,
  options?: string[],
}

// Plugin specific methods

// Adds a component to Echoes. Component will be prefixed with plugin Id (Auto generated by Echoes)
export type addComponent = (name: string, component: Component) => void
// Adds a setting to the plugin section of settings
export type addSettingsGroup = (group: SettingsGroup) => void
export type addSettingsToGroupList = (group: SettingsGroup, settings: SettingsGroupListItem) => void

export type addFileType = (name: string) => void

// Adds a extension to Tiptap
// export type addTextExtension 

// Component specific methods

// Registers a function to be called when the markdown is exported
type markdownExport = (callback: () => string) => void
// Registers a function to be called when the markdown is imported
type markdownImport = (callback: (string: string) => void) => void
